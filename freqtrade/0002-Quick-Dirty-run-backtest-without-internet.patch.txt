diff --git a/freqtrade/data/history/history_utils.py b/freqtrade/data/history/history_utils.py
index 9a206baa4..985251d07 100644
--- a/freqtrade/data/history/history_utils.py
+++ b/freqtrade/data/history/history_utils.py
@@ -285,10 +285,6 @@ def refresh_backtest_ohlcv_data(exchange: Exchange, pairs: List[str], timeframes
     candle_type = CandleType.get_default(trading_mode)
     process = ''
     for idx, pair in enumerate(pairs, start=1):
-        if pair not in exchange.markets:
-            pairs_not_available.append(pair)
-            logger.info(f"Skipping pair {pair}...")
-            continue
         for timeframe in timeframes:
 
             logger.info(f'Downloading pair {pair}, interval {timeframe}.')
@@ -397,11 +393,6 @@ def refresh_backtest_trades_data(exchange: Exchange, pairs: List[str], datadir:
     pairs_not_available = []
     data_handler = get_datahandler(datadir, data_format=data_format)
     for pair in pairs:
-        if pair not in exchange.markets:
-            pairs_not_available.append(pair)
-            logger.info(f"Skipping pair {pair}...")
-            continue
-
         if erase:
             if data_handler.trades_purge(pair):
                 logger.info(f'Deleting existing data for pair {pair}.')
diff --git a/freqtrade/optimize/backtesting.py b/freqtrade/optimize/backtesting.py
index 82aa2b3e9..a02b9e23d 100644
--- a/freqtrade/optimize/backtesting.py
+++ b/freqtrade/optimize/backtesting.py
@@ -86,7 +86,7 @@ class Backtesting:
 
         self._exchange_name = self.config['exchange']['name']
         self.exchange = ExchangeResolver.load_exchange(
-            self._exchange_name, self.config, load_leverage_tiers=True)
+            self._exchange_name, self.config, load_leverage_tiers=True, validate=False)
         self.dataprovider = DataProvider(self.config, self.exchange)
 
         if self.config.get('strategy_list'):
@@ -131,7 +131,7 @@ class Backtesting:
         if config.get('fee', None) is not None:
             self.fee = config['fee']
         else:
-            self.fee = self.exchange.get_fee(symbol=self.pairlists.whitelist[0])
+            self.fee = 0.01
         self.precision_mode = self.exchange.precisionMode
 
         if self.config.get('freqai_backtest_live_models', False):
@@ -750,8 +750,7 @@ class Backtesting:
             # Cap leverage between 1.0 and max_leverage.
             leverage = min(max(leverage, 1.0), max_leverage)
 
-        min_stake_amount = self.exchange.get_min_pair_stake_amount(
-            pair, propose_rate, -0.05, leverage=leverage) or 0
+        min_stake_amount = 0
         max_stake_amount = self.exchange.get_max_pair_stake_amount(
             pair, propose_rate, leverage=leverage)
         stake_available = self.wallets.get_available_stake_amount()
diff --git a/freqtrade/plugins/pairlist/StaticPairList.py b/freqtrade/plugins/pairlist/StaticPairList.py
index 4b1961a53..95dfdd0d8 100644
--- a/freqtrade/plugins/pairlist/StaticPairList.py
+++ b/freqtrade/plugins/pairlist/StaticPairList.py
@@ -46,13 +46,9 @@ class StaticPairList(IPairList):
         :param tickers: Tickers (from exchange.get_tickers). May be cached.
         :return: List of pairs
         """
-        if self._allow_inactive:
-            return self.verify_whitelist(
-                self._config['exchange']['pair_whitelist'], logger.info, keep_invalid=True
-            )
-        else:
-            return self._whitelist_for_active_markets(
-                self.verify_whitelist(self._config['exchange']['pair_whitelist'], logger.info))
+        return self.verify_whitelist(
+            self._config['exchange']['pair_whitelist'], logger.info, keep_invalid=True
+        )
 
     def filter_pairlist(self, pairlist: List[str], tickers: Tickers) -> List[str]:
         """
diff --git a/freqtrade/plugins/pairlistmanager.py b/freqtrade/plugins/pairlistmanager.py
index 20a264fd8..bc266cfdf 100644
--- a/freqtrade/plugins/pairlistmanager.py
+++ b/freqtrade/plugins/pairlistmanager.py
@@ -74,7 +74,7 @@ class PairListManager(LoggingMixin):
     @property
     def expanded_blacklist(self) -> List[str]:
         """The expanded blacklist (including wildcard expansion)"""
-        return expand_pairlist(self._blacklist, self._exchange.get_markets().keys())
+        return self._blacklist
 
     @property
     def name_list(self) -> List[str]:
@@ -93,9 +93,6 @@ class PairListManager(LoggingMixin):
         """Run pairlist through all configured Pairlist Handlers."""
         # Tickers should be cached to avoid calling the exchange on each call.
         tickers: Dict = {}
-        if self._tickers_needed:
-            tickers = self._get_cached_tickers()
-
         # Generate the pairlist with first Pairlist Handler in the chain
         pairlist = self._pairlist_handlers[0].gen_pairlist(tickers)
 
@@ -147,7 +144,7 @@ class PairListManager(LoggingMixin):
         :return: pairlist - whitelisted pairs
         """
         try:
-            whitelist = expand_pairlist(pairlist, self._exchange.get_markets().keys(), keep_invalid)
+            whitelist = pairlist
         except ValueError as err:
             logger.error(f"Pair whitelist contains an invalid Wildcard: {err}")
             return []
